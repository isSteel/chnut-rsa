{"version":3,"sources":["RSA.js","components.js","App.js","serviceWorker.js","index.js"],"names":["bigInt","require","RSA","bits","min","one","shiftLeft","max","prev","p","randBetween","isProbablePrime","keysize","q","totient","e","this","randomPrime","lcm","gcd","notEquals","minus","abs","shiftRight","isZero","n","multiply","d","modInv","encodedMsg","modPow","encryptedMsg","str","codes","split","map","i","charCodeAt","join","code","stringified","toString","string","length","num","Number","substr","String","fromCharCode","Title","Typography","Info","props","showDrawer","setState","visible","closeDrawer","state","className","type","onClick","title","placement","width","closable","onClose","bodyStyle","fontSize","textAlign","level","Component","Header","Body","generateKeys","keys","generate","inputDisabled","messageChange","event","message","target","value","encode","messageEncoded","isMessageEncoded","encrypt","messageEncrypted","isMessageEncrypted","bind","encrypted","encoded","size","placeholder","disabled","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a62ed75a.chunk.js","sourcesContent":["const bigInt = require('big-integer');\r\n\r\nexport default class RSA {\r\n  static randomPrime(bits) {\r\n    const min = bigInt.one.shiftLeft(bits - 1);\r\n    const max = bigInt.one.shiftLeft(bits).prev();\r\n    \r\n    while (true) {\r\n      let p = bigInt.randBetween(min, max);\r\n      if (p.isProbablePrime(256)) {\r\n        return p;\r\n      } \r\n    }\r\n  }\r\n\r\n  static generate(keysize) {\r\n    const e = bigInt(65537);\r\n    let p;\r\n    let q;\r\n    let totient;\r\n  \r\n    do {\r\n      p = this.randomPrime(keysize / 2);\r\n      q = this.randomPrime(keysize / 2);\r\n      totient = bigInt.lcm(\r\n        p.prev(),\r\n        q.prev()\r\n      );\r\n    } while (bigInt.gcd(e, totient).notEquals(1) || p.minus(q).abs().shiftRight(keysize / 2 - 100).isZero());\r\n\r\n    return {\r\n      e, \r\n      n: p.multiply(q),\r\n      d: e.modInv(totient),\r\n    };\r\n  }\r\n\r\n  static encrypt(encodedMsg, n, e) {\r\n    return bigInt(encodedMsg).modPow(e, n);\r\n  }\r\n\r\n  static decrypt(encryptedMsg, d, n) {\r\n    return bigInt(encryptedMsg).modPow(d, n); \r\n  }\r\n\r\n  static encode(str) {\r\n    const codes = str.split('').map(i => i.charCodeAt()).join('');\r\n\r\n    return bigInt(codes);\r\n  }\r\n\r\n  static decode(code) {\r\n    const stringified = code.toString();\r\n    let string = '';\r\n\r\n    for (let i = 0; i < stringified.length; i += 2) {\r\n      let num = Number(stringified.substr(i, 2));\r\n      \r\n      if (num <= 30) {\r\n        string += String.fromCharCode(Number(stringified.substr(i, 3)));\r\n        i++;\r\n      } else {\r\n        string += String.fromCharCode(num);\r\n      }\r\n    }\r\n\r\n    return string;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport RSA from './RSA';\r\n\r\nimport {\r\n    Typography,\r\n    Button,\r\n    Drawer,\r\n    Input\r\n} from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport class Info extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible: false\r\n        }\r\n    }\r\n\r\n    showDrawer = () => {\r\n        this.setState({\r\n            visible: true\r\n        });\r\n    }\r\n\r\n    closeDrawer = () => {\r\n        this.setState({\r\n            visible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='info'>\r\n                <Button type='primary' onClick={this.showDrawer}>Про RSA</Button>\r\n                <Drawer\r\n                    title=\"Алгоритм RSA\"\r\n                    placement='right'\r\n                    width='75%'\r\n                    closable\r\n                    onClose={this.closeDrawer}\r\n                    visible={this.state.visible}\r\n                    bodyStyle={{\r\n                        fontSize: '16px',\r\n                        textAlign: 'justify' \r\n                    }}\r\n                >\r\n                    <p>RSA — криптографічна система з відкритим ключем.</p>\r\n                    <p>\r\n                        RSA став першим алгоритмом такого типу, придатним і для\r\n                        шифрування і для цифрового підпису. Алгоритм використовується\r\n                        у великій кількості криптографічних застосунків.\r\n                    </p>\r\n\r\n                    <Title level={3}>Історія</Title>\r\n                    <p className='indent'>\r\n                        Опис RSA було опубліковано у 1977 році Рональдом Райвестом (Ronald Linn Rivest), Аді Шаміром (Adi Shamir) \r\n                        і Леонардом Адлеманом (Leonard Adleman) з Масачусетського Технологічного Інституту (MIT). <br />\r\n                        Британський математик Кліфорд Кокс (Clifford Cocks), що працював в центрі урядового зв'язку (GCHQ) \r\n                        Великобританії, описав аналогічну систему в 1973 році у внутрішніх документах центру, але ця робота не \r\n                        була розкрита до 1997 року, тож Райвест, Шамір і Адлеман розробили RSA незалежно від роботи Коксу. <br />\r\n                        В 1983 році був виданий патент 4405829 США, термін дії якого минув 21 вересня 2000 року.\r\n                    </p>\r\n\r\n                    <Title level={3}>Опис алгоритму</Title>\r\n                    <p className='indent'>\r\n                        Безпека алгоритму RSA побудована на принципі складності факторизації. Алгоритм використовує два ключі — відкритий (public) \r\n                        і секретний (private), разом відкритий і відповідний йому секретний ключі утворюють пари ключів (keypair). Відкритий ключ \r\n                        не потрібно зберігати в таємниці, він використовується для шифрування даних. Якщо повідомлення було зашифровано відкритим ключем, \r\n                        то розшифрувати його можна тільки відповідним секретним ключем.\r\n                    </p>\r\n                    \r\n                    <Title level={4}>Генерація ключів</Title>\r\n                    <span>Для того, щоб згенерувати пари ключів виконуються такі дії:</span>\r\n                    <ol>\r\n                        <li>Обираються два великих простих числа <i>p</i> та <i>q</i></li>\r\n                        <li>Обчислюється їх добуток <i>n=pq</i></li>\r\n                        <li>Обчислюється Функція Ейлера  <i>φ(n)=(p−1)(q−1)</i></li>\r\n                        <li>Обирається ціле e таке, що <i>1 &lt; e &lt; φ(n)</i> та <i>e</i> взаємно просте з  <i>φ(n)</i></li>\r\n                        <li>За допомогою розширеного алгоритма Евкліда знаходиться число <i>d</i> таке, що <i>ed≡1(modφ(n))</i></li>\r\n                    </ol>\r\n                    <p className='indent'>\r\n                        Число n називається модулем, а числа <i>e</i> і <i>d</i> — відкритою й секретною експонентами, відповідно. Пари чисел <i>(n,e)</i> є відкритою частиною ключа, \r\n                        а <i>(n,d)</i> — секретною. Числа <i>p</i> і <i>q</i> після генерації пари ключів можуть бути знищені, але в жодному разі не повинні бути розкриті.\r\n                    </p>\r\n\r\n                    <Title level={4}>Шифрування й розшифрування</Title>\r\n                    <span className='indent'>Для того, щоб зашифрувати повідомлення m&lt;n обчислюється</span>\r\n                    <p className='indent'><i>c=m<sup>e</sup> mod n</i></p>\r\n                    <span>Число c використовується в якості шифротексту. Для розшифрування потрібно обчислити:</span>\r\n                    <p className='indent'><i>c = m<sup>e</sup> mod n</i></p>\r\n                    <span>Неважко переконатися, що при розшифруванні ми відновимо вихідне повідомлення:</span>\r\n                    <p className='indent'><i>c<sup>d</sup> ≡ (m<sup>e</sup>)<sup>d</sup> ≡ m<sup>ed</sup> (mod n)</i></p>\r\n                    <span>З умови</span>\r\n                    <p className='indent'><i>ed ≡ 1 (mod φ(n))</i></p>\r\n                    <span>виходить, що</span>\r\n                    <p className='indent'><i>ed=kφ(n)+1 для деякого цілого k, отже</i></p>\r\n                    <p className='indent'><i>m<sup>ed</sup> ≡ m<sup>kφ(n)+1</sup> (mod n)</i></p>\r\n                    <span>Згідно теореми Ейлера:</span>\r\n                    <p className='indent'><i>m<sup>φ(n)</sup> ≡ 1 (mod n),</i></p>\r\n                    <span>тому</span>\r\n                    <p className='indent'><i>m<sup>kφ(n)+1</sup> ≡ m (mod n)</i></p>\r\n                    <p className='indent'><i>c<sup>d</sup> ≡ m (mod n)</i></p>\r\n\r\n                    <Title level={4}>Цифровий підпис</Title>\r\n                    <p className='indent'>\r\n                        RSA може використовуватися не тільки для шифрування, але й для цифрового підпису. \r\n                        Підпис <i>s</i> повідомлення <i>m</i> обчислюється з використанням секретного ключа за формулою:\r\n                    </p>\r\n                    <p className='indent'><i>s = m<sup>d</sup> mod n</i></p>\r\n                    <p className='indent'>\r\n                    Для перевірки правильності підпису потрібно переконатися, що виконується рівність\r\n                    </p>\r\n                    <p className='indent'><i>m = s<sup>e</sup> mod n</i></p>\r\n                </Drawer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport function Header() {\r\n    return (\r\n        <Title level={2}>Демонстрація алгоритму RSA</Title>  \r\n    )\r\n}\r\n\r\nexport class Body extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            messageEncoded: '',\r\n            messageEncrypted: '',\r\n            inputDisabled: true,\r\n            isMessageEncoded: false,\r\n            isMessageEncrypted: false,\r\n            n: '',\r\n            d: '',\r\n            e: '',\r\n        };\r\n        this.messageChange = this.messageChange.bind(this);\r\n    }\r\n\r\n    generateKeys = () => {\r\n        const keys = RSA.generate(250);\r\n\r\n        this.setState({\r\n            inputDisabled: false,\r\n            n: keys.n.toString(),\r\n            d: keys.d.toString(),\r\n            e: keys.e.toString(),\r\n        })\r\n    }\r\n\r\n    messageChange = event => {\r\n        this.setState({\r\n            message: event.target.value\r\n        })\r\n    }\r\n\r\n    encode = () => {\r\n        this.setState({\r\n            messageEncoded: RSA.encode(this.state.message),\r\n            isMessageEncoded: true\r\n        });\r\n    }\r\n\r\n    encrypt = () => {\r\n        this.setState({\r\n            messageEncrypted: RSA.encrypt(this.state.messageEncoded, this.state.n, this.state.e),\r\n            isMessageEncrypted: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const encrypted = (this.state.messageEncrypted).toString();\r\n        const encoded = (this.state.messageEncoded).toString();\r\n\r\n        return (\r\n            <div className='body'>\r\n                <Button onClick={this.generateKeys} className='button'>Згенерувати ключі</Button>\r\n                <div className='text'>\r\n                    <p>\r\n                        Публічний ключ: <b>{this.state.n}</b><br /><br />\r\n                        Приватний ключ: <b>{this.state.d}</b><br /><br />\r\n                        Експонента: <b>{this.state.e}</b><br /><br />\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"message-input\">\r\n                    <Input size='large' placeholder='Повідомлення' disabled={this.state.inputDisabled} onChange={this.messageChange} />\r\n                </div>\r\n                <Button disabled={this.state.inputDisabled} onClick={this.encode} className='button'>Закодувати</Button>\r\n                <div className='text'>\r\n                    <p>\r\n                        Закодоване повідомлення: <b>{encoded}</b>\r\n                    </p>\r\n                </div>\r\n                <Button disabled={!this.state.isMessageEncoded} onClick={this.encrypt} className='button'>Зашифрувати повідомлення</Button>\r\n                <div className='text'>\r\n                    <p>\r\n                        Ваше зашифроване повідомлення: <b>{encrypted}</b>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Info, Header, Body } from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Info />\n      <Header />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}